// O m√©todo readFileSync √© respons√°vel por ler arquivos e trazer seu conte√∫do para dentro do Node.js. Por ser s√≠ncrono, ele espera a leitura do arquivo terminar para, s√≥ ent√£o, atribuir o resultado √† constante data.

// O m√©todo readFileSync recebe dois par√¢metros:

// - O nome do arquivo;

// - Um par√¢metro opcional que, quando √© uma string, define o encoding que ser√° utilizado durante a leitura do arquivo.

// ======================== Lendo arquivos com m√©todos s√≠ncronos:
// --------------------------------------------------------------
// const fs = require('fs');

// const nomeDoArquivo = 'meu-arquivo.txt';

// try {
//   const data = fs.readFileSync(nomeDoArquivo, 'utf8');
//   console.log(data);
// } catch (err) {
//   console.error(`Erro ao ler o arquivo: ${err.path}`);
//   console.log(err);
// }

// ======================= Lendo arquivos com m√©todos Ass√≠ncronos:
// ---------------------------------------------------------------
// const fs = require('fs').promises;

// async function main() {
//   try {
//     const data = await fs.readFile('./meu-arquivo.txt', 'utf-8');
//     console.log(data);
//   } catch (err) {
//     console.error(`Erro ao ler o arquivo: ${err.message}`);
//   }
// }

// main()

// ================================ Escrevendo dados em arquivos:
// --------------------------------------------------------------
const fs = require('fs').promises;

async function main() {
  try {
    await fs.writeFile('./meu-arquivo.txt', 'Meu text√£o deu certo');
    console.log('Arquivo escrito com sucesso!');
  } catch (err) {
    console.error(`Erro ao escrever o arquivo: ${err.message}`);
  }
}

main()

// Anota a√≠ üñä: No writeFile, assim como ocorre no readFile, voc√™ pode especificar algumas op√ß√µes na escrita de arquivos passando um terceiro par√¢metro (flag) opcional em seus m√©todos.

// A op√ß√£o flag especifica como o arquivo deve ser aberto e manipulado. O padr√£o √© 'w', que especifica que o arquivo deve ser aberto para escrita.
// Observa√ß√£o: Se o arquivo n√£o existir, ele √© criado. Caso contr√°rio, √© reescrito, ou seja, tem seu conte√∫do apagado antes de o novo conte√∫do ser escrito. A flag 'wx', por exemplo, funciona como 'w', mas lan√ßa um erro caso o arquivo j√° exista.